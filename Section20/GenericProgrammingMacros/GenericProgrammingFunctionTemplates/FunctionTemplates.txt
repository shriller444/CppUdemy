What is a C++ template

- Blueprint --> for the compiler  --> generte specialised functions and classes

- function and class templates

- allow plugging in of any data type, define using placeholder type 

- compiler generates the appropriate function/class from the blueprint

- generic programming / meta programming --> generic inputs to write the class based on the variety of inputs program to program makes it meta . 

- all occurs at the time of compilation 

- revisit the max function using class templates

-----------------------------------------------

- we can replace the type we want to generalise with a name, say T

- but now this wont compile

T max(T a, T b){
    return (a > b) ? a: b;
}

- must tell its a template function , the compiler that is.
- also must tell it that T is the template parameter. 

template <typename T>

T max(T a, T b){
    return (a > b) ? a: b;
}

- this DOES NOT GENERATE CODE when run, only used when the user uses a specialised version of the template. 

- may also use class instead of typename. 

-----------------------------------------------

int a {20};
int b {20};

std::cout << max<int>(a,b); // or <double> <char>

- now the compiler can generate the appropriate function from the template 
- this happens at COMPILE TIME. 
- the compiler can often deduce the type and template parameter is not needed
- depending on the type of a and b, the compiler will figure it out

- this code example for the template uses the > operator --> type must support this operator or 
otherwise then overload the operator to work as specified in that case. 

Player p1{"Hero", 100, 20};
Player p2{"Enemy", 99, 3};

std::cout << max<Player>(p1,p2);

- only works if Player overloads the operator > 

multiple types as template parameters
-----------------------------------------------

- We can have multiple template parameters
- Their types can alter

template <typename T1, typename T2>

void func(T1 a, T2 b){
    std::cout << a << " " << b;
}

func<int, double>(10,20.2); // specify 2 data types. 
func('A', 12.4)

- often compiler can deduce them. 

