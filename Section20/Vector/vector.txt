-std::vector

#include <vector>

- Dynamic size
 - handled automatically
 - can expand and contract as required
 - elements are stored in contiguous memory as an array
 
- Direct element access (constant time complexity)

- Rapid insertion and deletion at the back (constant time)

- Insertion or removal of elements (linear time, increases in time the larger it gets)

- All iterators available and may invalidate


vec.push_back(4) --> push to the back of the vector the value 4 , most efficient

// copies all values to new memory location. 

std::vector - initialisation and assignment
----------------------------------------------------

std::vector<int> vec {1,2,3,4,5};

std::vector<int> vec (10,100); // ten 100s, uses an overloaded operator built into the vector class 

std::vector<std::string> sttoges {std::string{"Larry"}, "Moe", std::string{"Curly"}};

vec 1 = {2,4,6,8,10};

std::vector - initalisation and assignment
----------------------------------------------------

std::vector<int> vec {1,2,3,4,5}

std::cout << vec.size();        // 5
std::cout << vec.capacity(): // 5, the size it has to reache before expanding 
std::cout << vec.max_size;  //large number

std::cout << vec.at(0);  //1
std::cout << vec[1];     // 2  , no bounds checking unlike .at

std::cout << vec.front();  // 1 
std::cout << vec.back();   // 5 

std::vector - initialisation and assignment
-------------------------------------------------

Person p1 {"Larry", 18};
std::vector<Person> vec;

vec.push_back(p1); // add p1 to the back 
vec.pop_back(); // remove p1 from the back

vec.push_back(Person{"Larry", 18});

vec.emplace_back("Larry" , 18); // efficient, expects the paramters that would be passed into this object 
// constructs the person object using these parameters, moves or copies. 

std::vector<int> vec1 {1,2,3,4,5};
std::vector<int> vec2 {10,20,30,40,50};

std::cout << vec1.empty(); // 0 (false)
vec1.swap(vec2); // swaps the values of the 2 vectors

std::sort(vec.begin(). vec.end()); // sort using iterators from beginnig to end.

how to insert at a place other than the back 
-------------------------------------------------
std::vector<int> vec1 {1,2,3,4,5};
std::vector<int> vec2 {10,20,30,40,50};

auto it = std::find(vec1.begin(), vec1.end(), 3);
vec1.insert(it, 10);  // 1,2,10,3,4,5, uses the iterator to insert 10 into where 3 was found, 

it = std::find(vec1.begin(), vec1.end(), 4);
std::insert(it, vec2.begin(), vec2.end()); // 1,2,10,3,10,20,30,40,50,4,5, where 4 is replace with the entire of vec2 using iterators. 
-

