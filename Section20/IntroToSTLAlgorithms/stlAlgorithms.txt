Algorithms

- STL algorithms work on sequences of container elements provided to them by an iterator

- STL has many common and useful algorithms

- use cppreference to look at all of them

- Many algorithms require extra information in order for them to work
 - functions (function objects)
 - function pointers
 - Lambra expressions (C++11)
 
Algorithms and iterators
----------------------------------

- #include <algorithm>

- Different containers support different types of iterators
 - determines the type of algorithms supported
 
- All STL algorithms expect iterators as arguments 
 - Determines the sequences obtained from the container 

Iterator invalidation
----------------------------------

- iterators point to container elements

- Its possible iterators become invalid during processing

- Suppose we are iterating over a vector of 10 elements
 - and then we clear() the vector while iterating?
 - undefined behaviour - our iterators are now pointing to invalid locations
 
Example - find with primtive types
----------------------------------

- the find algorithm tries to locate the first occurrence of an element in a container
- Lots of variations
- Returns an iterator pointing to the located element or end()

std::vector<int> vec {1,2,3};

auto loc = std::find(vec.begin(), vec.end(), 3); // start and end iterator with the value its looking for at last. 

if (loc != vec.end()) // found
    std::cout << *loc << std::endl; // 3

- find needs to able to compare object

- operator == is used and must be provided by your class

std::vector <Player> team {*/assume init/*}
Player p {"Hero", 100, 12};

auto loc = std::find(team.begin(), team.end(), p);

if (loc != vec.end()) // found 
    // overloaded == operator is applied. 
    std::cout << *loc << std::endl; // operator<< called as on overloaded function for the player class

Example - for_each
----------------------------------

- for_each algorithm applies a function to each element in the iterator sequence

- Function must be provided to the algorithm as:
 - Functor (function object)
 - Function Pointer
 - lambda expression (C++11) -> go to modern . 

- Square each element ahead. 

for_each - using functor
----------------------------------

// structure to make the function object of 
struct Square_Functor{
    void operator() (int x){ // overload () operator to take in the same type of data that is in the container we are processing 
        std::cout << x * x << " ";
    }
};

Square_Functor square;  //Function object called square 

std::vector<int> vec {1,2,3,4};

std::for_each(vec.begin(), vec.end(), square); // for all items apply the function object (functor) 
// 1 4 9 16
// at each object the square(container item) is called which calls the overloaded operator to perform the desired function 

for_each using function pointers
----------------------------------

void square(int x){ // function 
    std::cout << x * x << " ";
}

std::vector<int> vec {1,2,3,4};

std::for_each(vec.begin(), vec.end(), square); // square is a pointer to square function rather than using an object 
// 1 4 9 16

for_each - using a lambda expression 

std::vector <int> vec {1,2,3,4};

std::for_each(vec.begin(), vec.end(), [](int x) {std::cout << x * x << " ";}) // lambda function. [] = capture clause for defining what from outside the lambda can be inside that function
                                                                              // (int x) is the parameter list to pass in 
                                                                              // can mix capture clause