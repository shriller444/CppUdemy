STL set containers

- Associative containers
 - collection of stored objects that allow fast retrieval using a key
 - STL provides sets and maps 
 - Usually implemented as a balanced binary tree or hashset
 - most operations are very efficient
 
- Sets

std::set
std::unordered_set
std::multiset
std::unordered_multiset

std::set
---------------------------

#include <set>

- similar to mathematical set

- Ordered by key

- no duplicate elements

- All iterators available and invalidate when corresponding element is deleted

SET INIT
---------------------------

same as vectors / lists etc...

std::set - common methods
---------------------------

std::set<int> s {4,1,1,3,3,2,5}; // 1 2 3 4 5

s.size() // 5, duplicates are removed as they are not allowed to repeat in set
s.maxsize(); // larger numbers

- NO CONCEPT OF FRONT OR BACK
-NO DIRECT ACCESS [i] .at

s.insert(7) // inserted at end, 1 2 3 4 5 7
can use emplace

Person p1 {"Larry" ,18};
Person p2 {"Moe" , 25};

std::set<Person> stooges;

stooges.insert(p1); // adds p1 to the set
auto result = stooges.insert(p2); // adds p2 to the set

- uses operator < for ordering

- .insert() returns an std::pair<iterator, bool>
    - first is an iterator to the inserted element or to the duplicate in the set
    - second is a boolean indicating success or failure, useful to know if an addition was succesful

std::set<int> s {1,2,3,4,5}'

s.erase(3); // erase 3: 1 2 4 5

auto it = s.find(5); // not using iterator find as sets find knows about the internal workings of the set.

if (it != s.end())
    s.erase(it);       // erase the 5: 1 2 4

s.count() // count how many times an element appears, ofc this can only be 1 or 0 

s.clear() // remove all elements
s.empty() // true or false


std::multi_set
---------------------------
#include <set>

- sorted by key
- Allows duplicate elements
- all iteratator are available

std::unorderd_set
---------------------------

#include <unordered_set>

- elements are unordered
- duplicate elements are not allowed

- elements cannot be modified -> due to implementation
 - must be erased and new element inserted

- no reverse iterators. 

std::unordered_multiset
---------------------------

#include <unordered_set>

- ordered
- allows duplicates
- no reverse iterators